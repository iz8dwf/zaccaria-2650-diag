 AS V1.42 Beta [Bld 230] - Source File diag_shell.asm - Page 1 - 10/24/2025 06:29:27 PM


       1/       0 :                     ; Diagnostic 1Kbytes ROM for Zaccaria Galaxia arcade PCB
       2/       0 :                     ; this code only tests the "shell" (alien's bombs) RAM and
       3/       0 :                     ; display circuitry.
       4/       0 :                     ; IZ8DWF 2022
       5/       0 :                     ; rev. 0.1
       6/       0 :                     	
       7/       0 :                     ; This code needs to go in position 8H (mapped at 0000H)
       8/       0 :                     ; the other ROMs are mapped as follows:
       9/       0 :                     ; 10H @ 0400H
      10/       0 :                     ; 11H @ 0800H
      11/       0 :                     ; 13H @ 0C00H
      12/       0 :                     ; 8I  @ 1000H
      13/       0 :                     ; 10I @ 2000H
      14/       0 :                     ; 11I @ 2400H
      15/       0 :                     ; 13I @ 2800H
      16/       0 :                     ; 11L @ 2C00H
      17/       0 :                     ; 13L @ 3000H
      18/       0 :                     
      19/       0 :                     ; Memory mapped stuff other than ROMs:
      20/       0 :                     ;
      21/       0 :                     ; Shell (bombs) RAM 	1400H - 14FFH (low nibble 3F, high 2F)
      22/       0 :                     ; BG color RAM	      	1800H - 1BFFH with PSU FLAG = 0 (DB0 3C, DB1 1B)
      23/       0 :                     ; BG (character) RAM  	1800H - 1BFFH with PSU FLAG = 1 (low nibble 2C, high 1C)
      24/       0 :                     ; Program RAM        	1C00H - 1FFFH  (low nibble 13F, high 13G)
      25/       0 :                     ; 2636 PVI 8F	      	1500H - 15FFH
      26/       0 :                     ; 2636 PVI 10F	      	1600H - 16FFH
      27/       0 :                     ; 2636 PVI 11F	      	1700H - 17FFH
      28/       0 :                     
      29/       0 :                     
      30/       0 :                     ; I/O read map:
      31/       0 :                     ;
      32/       0 :                     ; redd - clears collision detection 
      33/       0 :                     ; redc - reads collision detection @ 7L
      34/       0 :                     ; etxended: (bits 0 to 5 valid only)
      35/       0 :                     ; 0H = inputs 0 
      36/       0 :                     ; 2H = inputs 1 
      37/       0 :                     ; 6H = DIP switches @ 3N
      38/       0 :                     ; 7H = DIP switches @ 2N
      39/       0 :                     
      40/       0 :                     ; I/O write map:
      41/       0 :                     ;
      42/       0 :                     ; wrtd - sounds (3L latch, bits 0 to 5)
      43/       0 :                     ; wrtc - latch at 2L 
      44/       0 :                     ;	 bit 5 = STON (starfield enable)
      45/       0 :                     ;        bit 4 = sound 8
      46/       0 :                     ;        bit 3 = sound 7
      47/       0 :                     ;        bit 2,1,0 = transitor bases (coin counters)
      48/       0 :                     ;
      49/       0 :                     ; extended (no address decoded): central screen shifter latches at 3B, 4B
      50/       0 :                     
      51/       0 :                     ; The first 32 bytes on the BG ram aren't displayed, so we can use them as general purpose
      52/       0 :                     ; RAM: 1800H to 181FH 
      53/       0 :                     ; It also seems that only 29 chars of each row are actually displayed
      54/       0 :                     ; "first" row of text begins at 1BE0H, second at 1BE1H etc..
      55/       0 :                     
      56/       0 :                     	relaxed on
      57/       0 :                     	page 	0
      58/       0 :                     	cpu	2650
      59/       0 :                     	org 	0
      60/       0 :                     
      61/       0 :                     reset:
      62/       0 : 04 20               	lodi,r0 H'20'	; mask to disable interrupts
      63/       2 : 92                  	lpsu		; disables interrupts 
      64/       3 : 20                  	eorz r0		; r0 XOR r0 = clears the register  
      65/       4 : 93                  	lpsl		; clears status low
      66/       5 : 77 02               	ppsl H'02'	; set to unsigned logic compare
      67/       7 : C1                  	strz r1		; clears r1
      68/       8 :                     
      69/       8 :                     
      70/       8 :                     ; clears the sprites of PVIs
      71/       8 :                     
      72/       8 : CD 75 00            clrpvi:	stra,r0 H'1500',r1
      73/       B : CD 76 00            	stra,r0 H'1600',r1
      74/       E : CD 77 00            	stra,r0 H'1700',r1
      75/      11 : D9 75               	birr,r1 clrpvi
      76/      13 :                     
      77/      13 :                     
      78/      13 :                     ; initial diag outputs are the screen shifter latches	
      79/      13 : 06 FF               	lodi,r2 H'FF'		; set all latch bits to 1
      80/      15 : D6 00               	wrte,r2 H'00'
      81/      17 :                     
      82/      17 :                     ; clears "background" RAM
      83/      17 :                     
      84/      17 : 76 40               	ppsu H'40'		; to access the char ram, flag must be 1
      85/      19 : 04 3F               	lodi,r0 H'3F'
      86/      1B : 3F 01 93            	bsta,un fill
      87/      1E :                     
      88/      1E :                     ; makes a static diagonal "shell" pattern
      89/      1E :                     
      90/      1E : 20                  	eorz,r0
      91/      1F : 01                  	lodz,r1
      92/      20 : CC 74 00            fixsh:	stra,r0 H'1400',r0
      93/      23 : D8 7B               	birr,r0 fixsh
      94/      25 : 3F 02 BE            	bsta,un wfinp		; wait for player 1 pressed
      95/      28 :                     
      96/      28 :                     ; the following makes a shifting pattern
      97/      28 : 20                  	eorz,r0
      98/      29 : 01                  	lodz,r1
      99/      2A : B4 80               vsy:	tpsu H'80'		; attempt to start in the vertical retrace
     100/      2C : 98 7C               	bcfr,eq vsy
     101/      2E : CD 34 00            shpt:	stra,r0 H'1400',r1,+
     102/      31 : D8 7B               	birr,r0 shpt
     103/      33 : 85 01               	addi,r1 H'01'
     104/      35 : 1B 73               	bctr,un vsy		; and loops forever
     105/      37 :                     
     106/      37 :                     ; now the program ram will be tested
     107/      37 :                     ; exactly in the same way
     108/      37 : 06 03               	lodi,r2 (cpu>>8)&H'00FF'	; print CPU ram
     109/      39 : 07 31               	lodi,r3 (cpu&H'00FF')-1		; start address needs to be one byte before the actual string
     110/      3B : 3F 01 85            	bsta,un stspos
     111/      3E : 06 1B               	lodi,r2 H'1B'
     112/      40 : 07 E2               	lodi,r3 H'E2'			; on third row
     113/      42 : 3F 01 8C            	bsta,un stvpos
     114/      45 : 3F 02 DE            	bsta,un print
     115/      48 : 3F 02 CB            	bsta,un prram
     116/      4B :                     
     117/      4B :                     
     118/      4B : 0D 28 00            pram:	loda,r0 H'0800',r1,+
     119/      4E : CD 7C 00            	stra,r0 H'1C00',r1
     120/      51 : 0D 69 00            	loda,r0 H'0900',r1
     121/      54 : CD 7D 00            	stra,r0 H'1D00',r1
     122/      57 : 0D 6A 00            	loda,r0 H'0A00',r1
     123/      5A : CD 7E 00            	stra,r0 H'1E00',r1
     124/      5D : 0D 6B 00            	loda,r0 H'0B00',r1
     125/      60 : CD 7F 00            	stra,r0 H'1F00',r1
     126/      63 : 59 66               	brnr,r1 pram
     127/      65 : 0D 28 00            cpram:	loda,r0 H'0800',r1,+
     128/      68 : C2                  	strz,r2
     129/      69 : 0D 7C 00            	loda,r0 H'1C00',r1
     130/      6C : E2                  	comz,r2
     131/      6D : BC 01 EA            	bsfa,eq ramerr
     132/      70 : 0D 69 00            	loda,r0 H'0900',r1
     133/      73 : C2                  	strz,r2
     134/      74 : 0D 7D 00            	loda,r0 H'1D00',r1
     135/      77 : E2                  	comz,r2
     136/      78 : BC 01 EA            	bsfa,eq ramerr
     137/      7B : 0D 6A 00            	loda,r0 H'0A00',r1
     138/      7E : C2                  	strz,r2
     139/      7F : 0D 7E 00            	loda,r0 H'1E00',r1
     140/      82 : E2                  	comz,r2
     141/      83 : BC 01 EA            	bsfa,eq ramerr
     142/      86 : 0D 6B 00            	loda,r0 H'0B00',r1
     143/      89 : C2                  	strz,r2
     144/      8A : 0D 7F 00            	loda,r0 H'1F00',r1
     145/      8D : E2                  	comz,r2
     146/      8E : BC 01 EA            	bsfa,eq ramerr
     147/      91 : 59 52               	brnr,r1 cpram
     148/      93 : 3F 02 BE            	bsta,un wfinp		; wait for player 1 pressed
     149/      96 : 3F 02 D8            	bsta,un prok
     150/      99 :                     
     151/      99 :                     ; now we test the two bits of color char ram
     152/      99 : 06 03               	lodi,r2 (col>>8)&H'00FF'	; print CPU ram
     153/      9B : 07 3E               	lodi,r3 (col&H'00FF')-1		; start address needs to be one byte before the actual string
     154/      9D : 3F 01 85            	bsta,un stspos
     155/      A0 : 06 1B               	lodi,r2 H'1B'
     156/      A2 : 07 E3               	lodi,r3 H'E3'			; on 4th row
     157/      A4 : 3F 01 8C            	bsta,un stvpos
     158/      A7 : 3F 02 DE            	bsta,un print
     159/      AA : 3F 02 CB            	bsta,un prram
     160/      AD :                     
     161/      AD : 74 40               	cpsu H'40'		; to access color ram
     162/      AF : 3F 01 A2            	bsta,un tstbg
     163/      B2 : 04 03               	lodi,r0 H'03'		; restore a single color
     164/      B4 : 3F 01 93            	bsta,un fill
     165/      B7 : 76 40               	ppsu H'40'		; to access char ram
     166/      B9 : 3F 02 D8            	bsta,un prok
     167/      BC :                     
     168/      BC :                     ; test the "shell" RAM, 256 bytes total
     169/      BC :                     ; 
     170/      BC : 06 03               	lodi,r2 (shel>>8)&H'00FF'	; print CPU ram
     171/      BE : 07 42               	lodi,r3 (shel&H'00FF')-1		; start address needs to be one byte before the actual string
     172/      C0 : 3F 01 85            	bsta,un stspos
     173/      C3 : 06 1B               	lodi,r2 H'1B'
     174/      C5 : 07 E4               	lodi,r3 H'E4'			; on 5th row
     175/      C7 : 3F 01 8C            	bsta,un stvpos
     176/      CA : 3F 02 DE            	bsta,un print
     177/      CD : 3F 02 CB            	bsta,un prram
     178/      D0 :                     
     179/      D0 : 0D 24 00            shwlp:	loda,r0 H'0400',r1,+ 	; let's copy part of a ROM
     180/      D3 : CD 74 00            	stra,r0 H'1400',r1 	; to shell ram range 
     181/      D6 : 59 78               	brnr,r1 shwlp
     182/      D8 : 0D 24 00            shcmp:	loda,r0 H'0400',r1,+	; read again the ROM
     183/      DB : C2                  	strz,r2
     184/      DC : 0D 74 00            	loda,r0 H'1400',r1	; and compare to the shell RAM
     185/      DF : E2                  	comz,r2
     186/      E0 : BC 01 EA            	bsfa,eq	ramerr		
     187/      E3 : 59 73               	brnr,r1 shcmp
     188/      E5 : 3F 02 D8            	bsta,un prok
     189/      E8 : 3F 03 13            	bsta,un zersh
     190/      EB :                     ; print the collision latch content after zeroing it
     191/      EB :                     ; it must read 04H
     192/      EB :                     ;	redd,r0			; resets the collision registers
     193/      EB :                     ;	eorz,r0
     194/      EB :                     ;	stra,r0 H'1806'
     195/      EB :                     ;	lodi,r2 (cll>>8)&H'00FF'	
     196/      EB :                     ;	lodi,r3 (cll&H'00FF')-1	; start address needs to be one byte before the actual string
     197/      EB :                     ;	bsta,un stspos
     198/      EB :                     ;	bsta,un print
     199/      EB :                     ;	redc,r0			; reads the collision registers
     200/      EB :                     ;	stra,r0 H'1804'
     201/      EB :                     ;	bsta,un hexadj
     202/      EB :                     ;	stra,r0 H'1805'
     203/      EB :                     ;	loda,r0 H'1804'
     204/      EB :                     ;	bsta,un rot0
     205/      EB :                     ;	stra,r0 H'1804'
     206/      EB :                     ;	lodi,r2 H'18'			; prints the bit error hex
     207/      EB :                     ;	lodi,r3 H'03'
     208/      EB :                     ;	bsta,un stspos
     209/      EB :                     ;	bsta,un print
     210/      EB :                     	
     211/      EB :                     
     212/      EB :                     ; calculate chksum of all ROMs
     213/      EB :                     roms:	
     214/      EB : 06 03               	lodi,r2 (tenh>>8)&H'00FF'
     215/      ED : 07 52               	lodi,r3 (tenh&H'00FF')-1		; start address needs to be one byte before the actual string
     216/      EF : 3F 01 85            	bsta,un stspos
     217/      F2 : 06 1B               	lodi,r2 H'1B'
     218/      F4 : 07 E6               	lodi,r3 H'E6'			; on 5th row
     219/      F6 : 3F 01 8C            	bsta,un stvpos
     220/      F9 : 3F 02 DE            	bsta,un print
     221/      FC : 06 04               	lodi,r2 H'04'
     222/      FE : CE 18 1E            	stra,r2 H'181E'			; use 181E-F as ROM pointer
     223/     101 : 20                  	eorz,r0
     224/     102 : CC 18 1F            	stra,r0 H'181F'
     225/     105 : 3F 01 FE            	bsta,un romck
     226/     108 : 06 03               	lodi,r2 (eleh>>8)&H'00FF'
     227/     10A : 07 56               	lodi,r3 (eleh&H'00FF')-1		; start address needs to be one byte before the actual string
     228/     10C : 3F 01 85            	bsta,un stspos
     229/     10F : 3F 02 DE            	bsta,un print
     230/     112 : 3F 01 FE            	bsta,un romck
     231/     115 : 06 03               	lodi,r2 (thih>>8)&H'00FF'
     232/     117 : 07 5A               	lodi,r3 (thih&H'00FF')-1		; start address needs to be one byte before the actual string
     233/     119 : 3F 01 85            	bsta,un stspos
     234/     11C : 3F 02 DE            	bsta,un print
     235/     11F : 3F 01 FE            	bsta,un romck
     236/     122 : 06 03               	lodi,r2 (eigi>>8)&H'00FF'
     237/     124 : 07 5E               	lodi,r3 (eigi&H'00FF')-1		; start address needs to be one byte before the actual string
     238/     126 : 3F 01 85            	bsta,un stspos
     239/     129 : 06 1B               	lodi,r2 H'1B'
     240/     12B : 07 E7               	lodi,r3 H'E7'			; on 6th row
     241/     12D : 3F 01 8C            	bsta,un stvpos
     242/     130 : 3F 02 DE            	bsta,un print
     243/     133 : 3F 01 FE            	bsta,un romck
     244/     136 : 06 03               	lodi,r2 (teni>>8)&H'00FF'
     245/     138 : 07 61               	lodi,r3 (teni&H'00FF')-1		; start address needs to be one byte before the actual string
     246/     13A : 3F 01 85            	bsta,un stspos
     247/     13D : 3F 02 DE            	bsta,un print
     248/     140 : 06 20               	lodi,r2 H'20'
     249/     142 : CE 18 1E            	stra,r2 H'181E'			; use 181E-F as ROM pointer
     250/     145 : 20                  	eorz,r0
     251/     146 : CC 18 1F            	stra,r0 H'181F'
     252/     149 : 3F 01 FE            	bsta,un romck
     253/     14C : 06 03               	lodi,r2 (elei>>8)&H'00FF'
     254/     14E : 07 65               	lodi,r3 (elei&H'00FF')-1		; start address needs to be one byte before the actual string
     255/     150 : 3B 33               	bstr,un stspos
     256/     152 : 3F 02 DE            	bsta,un print
     257/     155 : 3F 01 FE            	bsta,un romck
     258/     158 : 06 03               	lodi,r2 (thii>>8)&H'00FF'
     259/     15A : 07 69               	lodi,r3 (thii&H'00FF')-1		; start address needs to be one byte before the actual string
     260/     15C : 3B 27               	bstr,un stspos
     261/     15E : 06 1B               	lodi,r2 H'1B'
     262/     160 : 07 E8               	lodi,r3 H'E8'			; on 7th row
     263/     162 : 3B 28               	bstr,un stvpos
     264/     164 : 3F 02 DE            	bsta,un print
     265/     167 : 3F 01 FE            	bsta,un romck
     266/     16A : 06 03               	lodi,r2 (elel>>8)&H'00FF'
     267/     16C : 07 6D               	lodi,r3 (elel&H'00FF')-1		; start address needs to be one byte before the actual string
     268/     16E : 3B 15               	bstr,un stspos
     269/     170 : 3F 02 DE            	bsta,un print
     270/     173 : 3F 01 FE            	bsta,un romck
     271/     176 : 06 03               	lodi,r2 (thil>>8)&H'00FF'
     272/     178 : 07 71               	lodi,r3 (thil&H'00FF')-1		; start address needs to be one byte before the actual string
     273/     17A : 3B 09               	bstr,un stspos
     274/     17C : 3F 02 DE            	bsta,un print
     275/     17F : 3F 01 FE            	bsta,un romck
     276/     182 : 1F 00 EB            	bcta,un roms			; loop on rom cksum
     277/     185 :                     ; subroutines
     278/     185 :                     
     279/     185 :                     stspos:
     280/     185 : CE 18 00            	stra,r2 H'1800'
     281/     188 : CF 18 01            	stra,r3 H'1801'
     282/     18B : 17                  	retc,un
     283/     18C :                     stvpos:
     284/     18C : CE 18 02            	stra,r2 H'1802'
     285/     18F : CF 18 03            	stra,r3 H'1803'
     286/     192 : 17                  	retc,un
     287/     193 :                     
     288/     193 : CD 38 00            fill:	stra,r0 H'1800',r1,+
     289/     196 : CD 79 00            	stra,r0 H'1900',r1
     290/     199 : CD 7A 00            	stra,r0 H'1A00',r1
     291/     19C : CD 7B 00            	stra,r0 H'1B00',r1
     292/     19F : 59 72               	brnr,r1 fill
     293/     1A1 : 17                  	retc,un
     294/     1A2 :                     
     295/     1A2 :                     tstbg:
     296/     1A2 : 0D 24 00            	loda,r0 H'0400',r1,+
     297/     1A5 : CD 78 00            	stra,r0 H'1800',r1
     298/     1A8 : 0D 65 00            	loda,r0 H'0500',r1
     299/     1AB : CD 79 00            	stra,r0 H'1900',r1
     300/     1AE : 0D 66 00            	loda,r0 H'0600',r1
     301/     1B1 : CD 7A 00            	stra,r0 H'1A00',r1
     302/     1B4 : 0D 67 00            	loda,r0 H'0700',r1
     303/     1B7 : CD 7B 00            	stra,r0 H'1B00',r1
     304/     1BA : 59 66               	brnr,r1 tstbg
     305/     1BC : 0D 24 00            cpbg:	loda,r0 H'0400',r1,+
     306/     1BF : C2                  	strz,r2
     307/     1C0 : 0D 78 00            	loda,r0 H'1800',r1
     308/     1C3 : E2                  	comz,r2
     309/     1C4 : B8 24               	bsfr,eq ramerr
     310/     1C6 : 0D 65 00            	loda,r0 H'0500',r1
     311/     1C9 : C2                  	strz,r2
     312/     1CA : 0D 79 00            	loda,r0 H'1900',r1
     313/     1CD : E2                  	comz,r2
     314/     1CE : B8 1A               	bsfr,eq ramerr
     315/     1D0 : 0D 66 00            	loda,r0 H'0600',r1
     316/     1D3 : C2                  	strz,r2
     317/     1D4 : 0D 7A 00            	loda,r0 H'1A00',r1
     318/     1D7 : E2                  	comz,r2
     319/     1D8 : B8 10               	bsfr,eq ramerr
     320/     1DA : 0D 67 00            	loda,r0 H'0700',r1
     321/     1DD : C2                  	strz,r2
     322/     1DE : 0D 7B 00            	loda,r0 H'1B00',r1
     323/     1E1 : E2                  	comz,r2
     324/     1E2 : B8 06               	bsfr,eq ramerr
     325/     1E4 : 59 56               	brnr,r1 cpbg
     326/     1E6 : 3F 02 BE            	bsta,un wfinp		; wait for player 1 pressed
     327/     1E9 : 17                  	retc,un
     328/     1EA :                     	
     329/     1EA :                     
     330/     1EA :                     ramerr:
     331/     1EA : 22                  	eorz,r2
     332/     1EB : B4 40               	tpsu H'40'		; if we are testing color ram
     333/     1ED : 18 04               	bctr,eq cnt		; no we aren't so it's a real error
     334/     1EF : 44 03               	andi,r0 H'03'		; color RAM is only wired to D1,D0
     335/     1F1 : 18 0A               	bctr,eq noerr		; so we exit if there's no error on those two bits
     336/     1F3 : 24 FF               cnt:	eori,r0 H'FF'		; invert the bad bits, now 0 = bad
     337/     1F5 : D4 00               	wrte,r0 H'00'		; shif register bits toggling are BAD
     338/     1F7 : 3F 02 69            	bsta,un prerr		; print error bits and error offset
     339/     1FA : 3F 02 BE            	bsta,un wfinp		; wait for player 1 pressed
     340/     1FD : 17                  noerr:	retc,un
     341/     1FE :                     
     342/     1FE : 04 3F               romck:	lodi,r0 H'3F'
     343/     200 : CC 18 09            	stra,r0 H'1809'
     344/     203 : CC 18 04            	stra,r0 H'1804'
     345/     206 : 20                  	eorz,r0
     346/     207 : CC 18 0A            	stra,r0 H'180A'
     347/     20A : C1                  	strz,r1			
     348/     20B : C3                  	strz,r3			; r3 will have the MS byte of the sum
     349/     20C : 77 08               	ppsl H'08'		; with carry = 1
     350/     20E : 75 01               	cpsl H'01'		; clear carry
     351/     210 : 0E 18 1E            	loda,r2 H'181E'		; initial high byte of rom address
     352/     213 : 86 04               	addi,r2 H'04'
     353/     215 : CE 18 3E            	stra,r2 H'183E'		; we need the end MSB, 1K rom = 4 x 256
     354/     218 : 8D B8 1E            sum:	adda,r0 *H'181E',r1,+	
     355/     21B : 87 00               	addi,r3 H'00'		; just the carry added
     356/     21D : 75 01               	cpsl H'01'		; clear carry
     357/     21F : 59 77               	brnr,r1 sum
     358/     221 : 0E 18 1E            	loda,r2 H'181E'
     359/     224 : 86 01               	addi,r2 H'01'
     360/     226 : CE 18 1E            	stra,r2 H'181E'
     361/     229 : EE 18 3E            	coma,r2 H'183E'
     362/     22C : 98 6A               	bcfr,eq sum
     363/     22E : 75 08               	cpsl H'08'
     364/     230 : CC 18 07            	stra,r0 H'1807'
     365/     233 : 3B 22               	bstr,un hexadj
     366/     235 : CC 18 08            	stra,r0 H'1808'
     367/     238 : 0C 18 07            	loda,r0 H'1807'
     368/     23B : 3B 25               	bstr,un rot0
     369/     23D : CC 18 07            	stra,r0 H'1807'
     370/     240 : 03                  	lodz,r3
     371/     241 : 3B 14               	bstr,un hexadj
     372/     243 : CC 18 06            	stra,r0 H'1806'
     373/     246 : 03                  	lodz,r3
     374/     247 : 3B 19               	bstr,un rot0
     375/     249 : CC 18 05            	stra,r0 H'1805'
     376/     24C : 06 18               	lodi,r2 H'18'			
     377/     24E : 07 03               	lodi,r3 H'03'
     378/     250 : 3F 01 85            	bsta,un stspos
     379/     253 : 3F 02 DE            	bsta,un print
     380/     256 : 17                  	retc,un
     381/     257 :                     
     382/     257 :                     
     383/     257 :                     hexadj:
     384/     257 : 44 0F               	andi,r0 H'0F'
     385/     259 : 84 60               	addi,r0 H'60'
     386/     25B : E4 6A               	comi,r0 H'6A'
     387/     25D : 1A 02               	bctr,lt stlow
     388/     25F : A4 29               	subi,r0 H'29'
     389/     261 : 17                  stlow:	retc,un
     390/     262 :                     
     391/     262 : 50                  rot0:	rrr,r0
     392/     263 : 50                  	rrr,r0
     393/     264 : 50                  	rrr,r0
     394/     265 : 50                  	rrr,r0
     395/     266 : 3B 6F               	bstr,un hexadj
     396/     268 : 17                  	retc,un
     397/     269 :                     
     398/     269 :                     
     399/     269 :                     prerr:				; error bits (0 = bad) are in r0, offset in r1
     400/     269 : 24 FF               	eori,r0 H'FF'		; lets invert the bits again
     401/     26B : CC 18 04            	stra,r0 H'1804'		; save the value
     402/     26E : 3B 67               	bstr,un hexadj
     403/     270 : CC 18 05            	stra,r0 H'1805'
     404/     273 : 0C 18 04            	loda,r0 H'1804'
     405/     276 : 3B 6A               	bstr,un rot0
     406/     278 : CC 18 04            	stra,r0 H'1804'
     407/     27B : 20                  	eorz,r0
     408/     27C : CC 18 06            	stra,r0 H'1806'
     409/     27F : CC 18 09            	stra,r0 H'1809'
     410/     282 : 01                  	lodz,r1
     411/     283 : 3B 52               	bstr,un hexadj
     412/     285 : CC 18 08            	stra,r0 H'1808'
     413/     288 : 01                  	lodz,r1
     414/     289 : 3B 57               	bstr,un rot0
     415/     28B : CC 18 07            	stra,r0 H'1807'
     416/     28E : 06 03               	lodi,r2 (bits>>8)&H'00FF'	
     417/     290 : 07 4A               	lodi,r3 (bits&H'00FF')-1	; start address needs to be one byte before the actual string
     418/     292 : 3F 01 85            	bsta,un stspos
     419/     295 : 3F 02 DE            	bsta,un print
     420/     298 :                     
     421/     298 : 06 18               	lodi,r2 H'18'			; prints the bit error hex
     422/     29A : 07 03               	lodi,r3 H'03'
     423/     29C : 3F 01 85            	bsta,un stspos
     424/     29F : 3F 02 DE            	bsta,un print
     425/     2A2 :                     
     426/     2A2 : 06 03               	lodi,r2 (offs>>8)&H'00FF'	
     427/     2A4 : 07 4E               	lodi,r3 (offs&H'00FF')-1	; start address needs to be one byte before the actual string
     428/     2A6 : 3F 01 85            	bsta,un stspos
     429/     2A9 : 3F 02 DE            	bsta,un print
     430/     2AC : 06 18               	lodi,r2 H'18'			
     431/     2AE : 07 06               	lodi,r3 H'06'
     432/     2B0 : 3F 01 85            	bsta,un stspos
     433/     2B3 : 3F 02 DE            	bsta,un print
     434/     2B6 : 17                  	retc,un
     435/     2B7 :                     
     436/     2B7 :                     
     437/     2B7 :                     inpck:
     438/     2B7 : 56 00               	rede,r2 H'00'		; read input col. 0
     439/     2B9 : 46 20               	andi,r2 H'20'		; mask bit 5 (fire)
     440/     2BB : 18 7A               	bctr,eq inpck		; if is pressed, we wait
     441/     2BD : 17                  	retc,un
     442/     2BE :                     wfinp:
     443/     2BE : 56 00               	rede,r2 H'00'		; read input col. 0
     444/     2C0 : 46 01               	andi,r2 H'01'		; mask bit 0 (player 1)
     445/     2C2 : 98 7A               	bcfr,eq wfinp		; if is NOT pressed, we wait
     446/     2C4 : 56 00               wfrl:	rede,r2 H'00'
     447/     2C6 : 46 01               	andi,r2 H'01'		
     448/     2C8 : 18 7A               	bctr,eq wfrl		; wait for release
     449/     2CA : 17                  	retc,un
     450/     2CB :                     
     451/     2CB :                     prram:
     452/     2CB : 06 03               	lodi,r2 (ram>>8)&H'00FF'	; print ram
     453/     2CD : 07 29               	lodi,r3 (ram&H'00FF')-1		; start address needs to be one byte before the actual string
     454/     2CF : CE 18 00            strp:	stra,r2 H'1800'
     455/     2D2 : CF 18 01            	stra,r3 H'1801'
     456/     2D5 : 3B 07               	bstr,un print
     457/     2D7 : 17                  	retc,un
     458/     2D8 :                     prok:
     459/     2D8 : 06 03               	lodi,r2 (ok>>8)&H'00FF'	; print ok
     460/     2DA : 07 46               	lodi,r3 (ok&H'00FF')-1		; start address needs to be one byte before the actual string
     461/     2DC : 1B 71               	bctr,un strp
     462/     2DE :                     print:
     463/     2DE : 77 10               	ppsl H'10'		; use alternate registers
     464/     2E0 : 05 00               	lodi,r1 H'00'
     465/     2E2 : 0E 18 02            	loda,r2 H'1802'
     466/     2E5 : 0F 18 03            	loda,r3 H'1803'
     467/     2E8 : 0D B8 00            rdnext:	loda,r0 *H'1800',r1,+
     468/     2EB : 18 23               	bctr,eq expr		; we reached the null termination
     469/     2ED : CC 98 02            	stra,r0 *H'1802'	; store in video ram
     470/     2F0 : E7 40               	comi,r3 H'40'
     471/     2F2 : 9A 0C               	bcfr,lt t20
     472/     2F4 : E6 18               	comi,r2 H'18'		; attempt at wrapping around to the next line
     473/     2F6 : 19 08               	bctr,gt t20
     474/     2F8 : 06 1B               	lodi,r2 H'1B'
     475/     2FA : 47 1F               	andi,r3 H'1F'
     476/     2FC : 87 01               	addi,r3 H'01'
     477/     2FE : 1B 06               	bctr,un st2
     478/     300 : E7 20               t20:	comi,r3 H'20'
     479/     302 : 9A 05               	bcfr,lt npos
     480/     304 : A6 01               	subi,r2 H'01'
     481/     306 : CE 18 02            st2:	stra,r2 H'1802'
     482/     309 : A7 20               npos:	subi,r3 H'20'
     483/     30B : CF 18 03            	stra,r3 H'1803'
     484/     30E : 1B 58               	bctr,un rdnext
     485/     310 : 75 10               expr:	cpsl H'10'		; "old" registers again
     486/     312 : 17                  	retc,un
     487/     313 :                     	
     488/     313 :                     
     489/     313 : 20                  zersh:	eorz,r0
     490/     314 : C1                  	strz,r1
     491/     315 : CD 34 00            wz:	stra,r0 H'1400',r1,+
     492/     318 : 59 7B               	brnr,r1 wz
     493/     31A : 17                  	retc,un
     494/     31B :                     
     495/     31B :                     ; not all letters are available! 
     496/     31B :                     ; space is 3Fh
     497/     31B :                     ; numbers start at 60h
     498/     31B :                     
     499/     31B : 47 41 4C 41 3F 44   welc:	db "GALA",H'3F',"DIAG",H'3F',H'68',"DWF\0"
              321 : 49 41 47 3F 68 44 
              327 : 57 46 00          
     500/     32A : 52 41 4D 00         ram:	db "RAM\0"
     501/     32E : 52 4F 4D 00         rom:	db "ROM\0"
     502/     332 : 43 50 3F 00         cpu:	db "CP",H'3F',H'00'
     503/     336 : 3F 43 4C 3F 00      cll:	db H'3F',"CL",H'3F',H'00'
     504/     33B : 42 47 3F 00         bg:	db "BG",H'3F',H'00'
     505/     33F : 43 4F 3F 00         col:	db "CO",H'3F',H'00'
     506/     343 : 53 48 3F 00         shel:	db "SH",H'3F',H'00'
     507/     347 : 3F 47 44 00         ok:	db H'3F',"GD",H'00'
     508/     34B : 3F 42 3F 00         bits:	db H'3F',"B",H'3F',H'00'
     509/     34F : 3F 4F 3F 00         offs:	db H'3F',"O",H'3F',H'00'
     510/     353 : 61 60 48 00         tenh:	db H'61',H'60',"H\0"
     511/     357 : 61 61 48 00         eleh:	db H'61',H'61',"H\0"
     512/     35B : 61 63 48 00         thih:	db H'61',H'63',"H\0"
     513/     35F : 68 49 00            eigi:	db H'68',"I\0"
     514/     362 : 61 60 49 00         teni:	db H'61',H'60',"I\0"
     515/     366 : 61 61 49 00         elei:	db H'61',H'61',"I\0"
     516/     36A : 61 63 49 00         thii:	db H'61',H'63',"I\0"
     517/     36E : 61 61 4C 00         elel:	db H'61',H'61',"L\0"
     518/     372 : 61 63 4C 00         thil:	db H'61',H'63',"L\0"
     519/     376 :                     
 AS V1.42 Beta [Bld 230] - Source File diag_shell.asm - Page 2 - 10/24/2025 06:29:27 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*BG :                           33B C |  BITS :                         34B C |
*CASESENSITIVE :                  0 - | *CLL :                          336 C |
 CLRPVI :                         8 C |  CNT :                          1F3 C |
 COL :                          33F C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CPBG :                         1BC C |
 CPRAM :                         65 C |  CPU :                          332 C |
*DATE :                "10/24/2025" - |  EIGI :                         35F C |
 ELEH :                         357 C |  ELEI :                         366 C |
 ELEL :                         36E C |  EXPR :                         310 C |
*FALSE :                          0 - |  FILL :                         193 C |
 FIXSH :                         20 C | *HAS64 :                          1 - |
 HEXADJ :                       257 C |  INPCK :                        2B7 C |
*LISTON :                         1 - | *MACEXP :                         7 - |
*MOMCPU :                      2650 - | *MOMCPUNAME :                "2650" - |
*NESTMAX :                      100 - |  NOERR :                        1FD C |
 NPOS :                         309 C |  OFFS :                         34F C |
 OK :                           347 C |  PRAM :                          4B C |
 PRERR :                        269 C |  PRINT :                        2DE C |
 PROK :                         2D8 C |  PRRAM :                        2CB C |
 RAM :                          32A C |  RAMERR :                       1EA C |
 RDNEXT :                       2E8 C | *RELAXED :                        1 - |
*RESET :                          0 C | *ROM :                          32E C |
 ROMCK :                        1FE C |  ROMS :                          EB C |
 ROT0 :                         262 C |  SHCMP :                         D8 C |
 SHEL :                         343 C |  SHPT :                          2E C |
 SHWLP :                         D0 C |  ST2 :                          306 C |
 STLOW :                        261 C |  STRP :                         2CF C |
 STSPOS :                       185 C |  STVPOS :                       18C C |
 SUM :                          218 C |  T20 :                          300 C |
 TENH :                         353 C |  TENI :                         362 C |
 THIH :                         35B C |  THII :                         36A C |
 THIL :                         372 C | *TIME :               "06:29:27 PM" - |
*TRUE :                           1 - |  TSTBG :                        1A2 C |
*VERSION :                     142F - |  VSY :                           2A C |
*WELC :                         31B C |  WFINP :                        2BE C |
 WFRL :                         2C4 C |  WZ :                           315 C |
 ZERSH :                        313 C |

     74 symbols
     21 unused symbols

 AS V1.42 Beta [Bld 230] - Source File diag_shell.asm - Page 3 - 10/24/2025 06:29:27 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

    519 lines source file
      2 passes
      0 errors
      0 warnings
